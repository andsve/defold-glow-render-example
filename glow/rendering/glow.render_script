local function recreate_render_targets(self)
	
	if self.glow_target then
		render.delete_render_target(self.glow_target)
	end
	if self.glow_target_blur then
		render.delete_render_target(self.glow_target_blur)
	end
	
    local glow_target_params = {}
    glow_target_params[render.BUFFER_COLOR_BIT] = {
		width = render.get_window_width() / self.glow_division,
		height = render.get_window_height() / self.glow_division,
		format = render.FORMAT_RGBA,
		min_filter = render.FILTER_LINEAR,
		mag_filter = render.FILTER_LINEAR
	}
	glow_target_params[render.BUFFER_DEPTH_BIT] = {
		width = render.get_window_width() / self.glow_division,
		height = render.get_window_height() / self.glow_division,
		format = render.FORMAT_DEPTH
	}
    self.glow_target = render.render_target("glow_target", glow_target_params)
    self.glow_target_blur = render.render_target("glow_target_blur", glow_target_params)
    
    self.glow_constants = render.constant_buffer()
    self.glow_constants2 = render.constant_buffer()
    self.glow_constants.resolution = vmath.vector4(render.get_window_width() / self.glow_division, render.get_window_height() / self.glow_division, 1, 0)
    self.glow_constants2.resolution = vmath.vector4(render.get_window_width() / self.glow_division, render.get_window_height() / self.glow_division, 0, 1)
end

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})
    self.glow_target_pred = render.predicate({"glow_target"})
    self.glow_tile_pred = render.predicate({"glow_tile"})
    self.glow_particle_pred = render.predicate({"glow_particle"})

    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()
    
    self.glow_division = 6
    recreate_render_targets(self)
end

local function render_glow_target(self)
	render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4())
	render.draw(self.glow_target_pred, self.glow_constants)
end

local function render_glow_target_blur(self)
	render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4())
	render.draw(self.glow_target_pred, self.glow_constants2)
end

local function render_game(self)
	render.set_view(self.view)

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)

    render.set_projection(vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), -1, 1))

    render.draw(self.tile_pred)
    render.draw(self.particle_pred)
    render.draw_debug3d()
end

local function render_game_glow_pass(self)
	render.set_view(self.view)

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)

    render.set_projection(vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), -1, 1))

    render.draw(self.glow_tile_pred)
    render.draw(self.glow_particle_pred)
    render.draw_debug3d()
end

local function render_gui(self)
	render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)

    render.set_depth_mask(false)
    render.draw_debug2d()
end

function update(self)
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    
    -- Render game to glow target
    render.enable_render_target(self.glow_target)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    local render_w = render.get_render_target_width(self.glow_target, render.BUFFER_COLOR_BIT)
    local render_h = render.get_render_target_height(self.glow_target, render.BUFFER_COLOR_BIT)
    render.set_viewport(0, 0, render_w, render_h)
    --render_game(self)
    render_game_glow_pass(self)
    render.disable_render_target(self.glow_target)
    
    -- Render glow and blur to a second render target
    render.enable_render_target(self.glow_target_blur)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    local render_w = render.get_render_target_width(self.glow_target_blur, render.BUFFER_COLOR_BIT)
    local render_h = render.get_render_target_height(self.glow_target_blur, render.BUFFER_COLOR_BIT)
    render.set_viewport(0, 0, render_w, render_h)
    render.enable_texture(0, self.glow_target, render.BUFFER_COLOR_BIT)
    render_glow_target(self)
    render.disable_texture(0, self.glow_target)
    render.disable_render_target(self.glow_target_blur)
    
    
    -- Render game again to backbuffer
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
    render_game(self)
    
    -- Render blurred glow as an overlay
    render.enable_texture(0, self.glow_target_blur, render.BUFFER_COLOR_BIT)
    render_glow_target_blur(self)
    render.disable_texture(0, self.glow_target_blur)
    
    -- Render GUIs last, on top of everything
    render_gui(self)
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
    elseif message_id == hash("window_resized") then
    	recreate_render_targets(self)
    end
end
